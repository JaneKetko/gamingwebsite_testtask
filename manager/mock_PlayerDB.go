// Code generated by mockery v1.0.0. DO NOT EDIT.
package manager

import mock "github.com/stretchr/testify/mock"
import player "github.com/Ragnar-BY/gamingwebsite_testtask/player"

// MockPlayerDB is an autogenerated mock type for the PlayerDB type
type MockPlayerDB struct {
	mock.Mock
}

// AddPlayer provides a mock function with given fields: name
func (_m *MockPlayerDB) AddPlayer(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: id
func (_m *MockPlayerDB) DeletePlayer(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlayerByID provides a mock function with given fields: id
func (_m *MockPlayerDB) PlayerByID(id int) (*player.Player, error) {
	ret := _m.Called(id)

	var r0 *player.Player
	if rf, ok := ret.Get(0).(func(int) *player.Player); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*player.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlayer provides a mock function with given fields: id, _a1
func (_m *MockPlayerDB) UpdatePlayer(id int, _a1 player.Player) error {
	ret := _m.Called(id, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, player.Player) error); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
